import { useState } from "react";
import { useNavigate } from "react-router-dom";
import { MapContainer, TileLayer, useMapEvents, Marker } from "react-leaflet";
import "leaflet/dist/leaflet.css";

function LocationMarker({ position, onSelect }) {
  const [markerPos, setMarkerPos] = useState(position || null);

  useMapEvents({
    click(e) {
      const { lat, lng } = e.latlng;
      setMarkerPos({ lat, lng });
      onSelect({ lat, lng });
    },
  });

  return markerPos ? <Marker position={markerPos} /> : null;
}

export default function CreateEvent() {
  const navigate = useNavigate();
  const [title, setTitle] = useState("");
  const [date, setDate] = useState("");
  const [recurrence, setRecurrence] = useState("none");
  const [notes, setNotes] = useState("");
  const [location, setLocation] = useState(null);
  const [submitting, setSubmitting] = useState(false);

  const API_URL = import.meta.env.VITE_API_URL;

  const handleSubmit = async (e) => {
    e.preventDefault();
    setSubmitting(true);

    if (!location?.lat || !location?.lng) {
      alert("Please select a location on the map.");
      setSubmitting(false);
      return;
    }

    const payload = {
      title,
      date,
      recurrence,
      notes,
      location: { lat: location.lat, lon: location.lng },
    };

    try {
      const token = localStorage.getItem("token");
      const res = await fetch(`${API_URL}/api/events/create`, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          Authorization: `Bearer ${token}`,
        },
        body: JSON.stringify(payload),
      });

      const data = await res.json();
      if (!res.ok) throw new Error(data.message || "Failed to create event");

      alert("Event created successfully!");
      navigate("/");
    } catch (err) {
      console.error(err);
      alert("Error creating event");
    } finally {
      setSubmitting(false);
    }
  };

  return (
    <div className="p-6 bg-gradient-to-br from-[#002E78] to-[#160524] min-h-screen">
      <h2 className="text-2xl mb-4 text-white">Create New Event</h2>

      <div className="mb-4 h-64">
        <MapContainer center={[30.0, 31.0]} zoom={6} style={{ height: "100%" }}>
          <TileLayer
            url="https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png"
            attribution="&copy; OpenStreetMap contributors"
          />
          <LocationMarker onSelect={(loc) => setLocation(loc)} />
        </MapContainer>
      </div>

      <form onSubmit={handleSubmit} className="space-y-4">
        <div>
          <label className="text-white">Title:</label>
          <input
            type="text"
            value={title}
            onChange={(e) => setTitle(e.target.value)}
            className="w-full border rounded p-2 bg-white/20 text-white"
            required
          />
        </div>

        <div>
          <label className="text-white">Date & Time:</label>
          <input
            type="datetime-local"
            value={date}
            onChange={(e) => setDate(e.target.value)}
            className="w-full border rounded p-2 bg-white/20 text-white"
            required
          />
        </div>

        <div>
          <label className="text-white">Recurrence:</label>
          <select
            value={recurrence}
            onChange={(e) => setRecurrence(e.target.value)}
            className="w-full border rounded p-2 bg-white/20 text-white"
          >
            <option value="none">None</option>
            <option value="daily">Daily</option>
            <option value="weekly">Weekly</option>
          </select>
        </div>

        <div>
          <label className="text-white">Notes:</label>
          <textarea
            value={notes}
            onChange={(e) => setNotes(e.target.value)}
            className="w-full border rounded p-2 bg-white/20 text-white"
          />
        </div>

        <button
          type="submit"
          disabled={submitting}
          className="px-4 py-2 bg-gradient-to-r from-[#002E78] to-[#160524] text-white rounded hover:opacity-90 transition"
        >
          {submitting ? "Creating..." : "Create Event"}
        </button>
      </form>
    </div>
  );
} ظبطلي ال layo


import React from "react";
import { FaSun, FaCloud, FaCloudRain, FaWind, FaThermometerHalf } from "react-icons/fa";

const staticEvents = [
  {
    id: 1,
    title: "Morning Jog",
    temperature: 25,
    wind: 10,
    rain: 0.5,
    icon: <FaSun size={24} />,
    lightColor: "from-yellow-200 to-yellow-400",
    darkColor: "from-yellow-600 to-yellow-800",
    sparkline: [20, 22, 25, 23, 24],
  },
  {
    id: 2,
    title: "Office Meeting",
    temperature: 28,
    wind: 5,
    rain: 0,
    icon: <FaCloud size={24} />,
    lightColor: "from-blue-200 to-blue-400",
    darkColor: "from-blue-600 to-blue-800",
    sparkline: [26, 27, 28, 29, 28],
  },
  {
    id: 3,
    title: "Evening Walk",
    temperature: 22,
    wind: 8,
    rain: 2,
    icon: <FaCloudRain size={24} />,
    lightColor: "from-green-200 to-green-400",
    darkColor: "from-green-600 to-green-800",
    sparkline: [22, 21, 23, 22, 22],
  },
  {
    id: 4,
    title: "Cycling",
    temperature: 24,
    wind: 12,
    rain: 0,
    icon: <FaWind size={24} />,
    lightColor: "from-purple-200 to-purple-400",
    darkColor: "from-purple-600 to-purple-800",
    sparkline: [23, 24, 25, 24, 24],
  },
];

const sparklinePath = (values = [], w = 100, h = 30) => {
  const min = Math.min(...values);
  const max = Math.max(...values);
  const range = max - min || 1;
  const step = w / (values.length - 1 || 1);
  const points = values.map((v, i) => {
    const x = i * step;
    const y = h - ((v - min) / range) * h;
    return `${x},${y}`;
  });
  return `M ${points.join(" L ")}`;
};

export default function EventDetailsStatic() {
  return (
    <div className="min-h-screen p-6 bg-gray-100 dark:bg-gray-900 text-gray-900 dark:text-white">
      <h1 className="text-3xl font-bold mb-6 text-center">Your Events</h1>
      <div className="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-6">
        {staticEvents.map((ev) => (
          <div
            key={ev.id}
            className={`rounded-2xl p-6 shadow-xl flex flex-col items-center gap-4
              bg-gradient-to-br from-[#5076B4] to-[#C48EF1] dark:from-[#002E78] dark:to-[#160524]`}
          >
            <div className="text-white mb-2">{ev.icon}</div>
            <h2 className="text-xl font-semibold">{ev.title}</h2>
            <p>Temp: {ev.temperature}°C</p>
            <p>Wind: {ev.wind} km/h</p>
            <p>Rain: {ev.rain} mm</p>

            {/* Sparkline chart */}
            <svg width="100%" height="40" viewBox="0 0 100 30" preserveAspectRatio="none">
              <path
                d={sparklinePath(ev.sparkline, 100, 30)}
                fill="none"
                stroke="white"
                strokeWidth="2"
              />
            </svg>
          </div>
        ))}
      </div>
    </div>
  );
}
